import React, { useState, useEffect, useCallback } from 'react';
import { Play, Pause, SkipBack, SkipForward, Volume2, Calendar, Settings, Maximize2, RotateCcw, Quote } from 'lucide-react';

const Dashboard = () => {
  const [currentTime, setCurrentTime] = useState(new Date());
  const [isDarkMode, setIsDarkMode] = useState(true);
  const [is24Hour, setIs24Hour] = useState(false);
  const [showSettings, setShowSettings] = useState(false);
  const [expandedTile, setExpandedTile] = useState(null);
  
  // Pomodoro state
  const [pomodoroTime, setPomodoroTime] = useState(25 * 60); // 25 minutes
  const [pomodoroActive, setPomodoroActive] = useState(false);
  const [pomodoroMode, setPomodoroMode] = useState('work'); // 'work' or 'break'
  const [pomodoroSession, setPomodoroSession] = useState(0);
  const [workDuration, setWorkDuration] = useState(25);
  const [breakDuration, setBreakDuration] = useState(5);
  const [pauseSpotifyOnFocus, setPauseSpotifyOnFocus] = useState(true);
  
  // Spotify state
  const [spotifyPlaying, setSpotifyPlaying] = useState(false);
  const [spotifyTrack, setSpotifyTrack] = useState({
    name: "Focus Flow",
    artist: "Ambient Collective",
    album: "Deep Work Sessions",
    image: "https://images.unsplash.com/photo-1493225457124-a3eb161ffa5f?w=300&h=300&fit=crop"
  });
  const [spotifyVolume, setSpotifyVolume] = useState(70);
  
  // Calendar state
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const [selectedDate, setSelectedDate] = useState(new Date());
  
  // Quote state
  const [dailyQuote, setDailyQuote] = useState({
    text: "Focus is not about forcing concentration, but about removing distractions.",
    author: "Cal Newport"
  });
  
  // Ambient sound state
  const [ambientSound, setAmbientSound] = useState('none');
  const [ambientVolume, setAmbientVolume] = useState(30);

  // Clock update
  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  // Pomodoro timer effect
  useEffect(() => {
    let interval;
    if (pomodoroActive && pomodoroTime > 0) {
      interval = setInterval(() => {
        setPomodoroTime(time => time - 1);
      }, 1000);
    } else if (pomodoroTime === 0) {
      // Timer completed
      setPomodoroActive(false);
      if (pomodoroMode === 'work') {
        setPomodoroMode('break');
        setPomodoroTime(breakDuration * 60);
        setPomodoroSession(s => s + 1);
      } else {
        setPomodoroMode('work');
        setPomodoroTime(workDuration * 60);
      }
    }
    return () => clearInterval(interval);
  }, [pomodoroActive, pomodoroTime, pomodoroMode, workDuration, breakDuration]);

  // Format time
  const formatTime = (date) => {
    const hours = is24Hour ? date.getHours() : date.getHours() % 12 || 12;
    const minutes = date.getMinutes().toString().padStart(2, '0');
    const period = is24Hour ? '' : ` ${date.getHours() >= 12 ? 'PM' : 'AM'}`;
    return `${hours}:${minutes}${period}`;
  };

  const formatPomodoroTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // Calendar functions
  const getDaysInMonth = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth();
    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);
    const daysInMonth = lastDay.getDate();
    const startingDayOfWeek = firstDay.getDay();
    
    const days = [];
    
    // Add empty cells for days before the first day of the month
    for (let i = 0; i < startingDayOfWeek; i++) {
      days.push(null);
    }
    
    // Add all days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(day);
    }
    
    return days;
  };

  const isToday = (day) => {
    const today = new Date();
    return day === today.getDate() && 
           currentMonth.getMonth() === today.getMonth() && 
           currentMonth.getFullYear() === today.getFullYear();
  };

  const togglePomodoro = () => {
    setPomodoroActive(!pomodoroActive);
    if (pauseSpotifyOnFocus && !pomodoroActive) {
      setSpotifyPlaying(false);
    }
  };

  const resetPomodoro = () => {
    setPomodoroActive(false);
    setPomodoroTime(pomodoroMode === 'work' ? workDuration * 60 : breakDuration * 60);
  };

  const toggleSpotify = () => {
    setSpotifyPlaying(!spotifyPlaying);
  };

  const ClockTile = () => (
    <div className={`relative overflow-hidden rounded-2xl p-8 ${pomodoroActive ? 'opacity-50' : 'opacity-100'} transition-opacity duration-500`} 
         style={{
           background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
           boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
         }}>
      <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 to-purple-600/20"></div>
      {/* Geometric Clock Pattern */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-4 right-4 w-24 h-24 rounded-full border-4 border-white/30"></div>
        <div className="absolute top-8 right-8 w-16 h-16 rounded-full border-2 border-white/40"></div>
        <div className="absolute bottom-4 left-4 w-32 h-32 rounded-full border-4 border-white/20"></div>
        <div className="absolute bottom-8 left-8 w-20 h-20 rounded-full border-2 border-white/30"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-2 h-2 bg-white/60 rounded-full"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-0.5 bg-white/30 origin-left rotate-90"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-28 h-0.5 bg-white/40 origin-left rotate-45"></div>
      </div>
      <div className="absolute top-4 right-4">
        <Maximize2 
          className="w-6 h-6 text-white/70 cursor-pointer hover:text-white transition-colors"
          onClick={() => setExpandedTile(expandedTile === 'clock' ? null : 'clock')}
        />
      </div>
      <div className="relative z-10">
        <div className="text-6xl font-mono font-bold text-white mb-2 tracking-wider">
          {formatTime(currentTime)}
        </div>
        <div className="text-xl text-white/80">
          {currentTime.toLocaleDateString('en-US', { 
            weekday: 'long', 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric' 
          })}
        </div>
      </div>
    </div>
  );

  const PomodoroTile = () => (
    <div className="relative overflow-hidden rounded-2xl p-8 transition-all duration-500" 
         style={{
           background: pomodoroActive 
             ? 'linear-gradient(135deg, #ff6b6b 0%, #ffa500 100%)'
             : 'linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%)',
           boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
         }}>
      <div className="absolute inset-0 bg-gradient-to-r from-teal-600/20 to-green-600/20"></div>
      {/* Tomato/Timer Graphics */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-6 right-6 w-16 h-16 bg-white/30 rounded-full"></div>
        <div className="absolute top-8 right-8 w-12 h-12 bg-white/40 rounded-full"></div>
        <div className="absolute top-4 right-4 w-6 h-8 bg-white/30 rounded-t-full transform -rotate-12"></div>
        <div className="absolute bottom-4 left-4 w-20 h-20 border-4 border-white/30 rounded-full"></div>
        <div className="absolute bottom-8 left-8 w-12 h-12 border-2 border-white/40 rounded-full"></div>
        <div className="absolute top-1/2 right-1/4 w-8 h-8 bg-white/20 transform rotate-45"></div>
        <div className="absolute bottom-1/3 right-1/3 w-6 h-6 bg-white/30 transform rotate-12"></div>
      </div>
      <div className="absolute top-4 right-4">
        <Maximize2 
          className="w-6 h-6 text-white/70 cursor-pointer hover:text-white transition-colors"
          onClick={() => setExpandedTile(expandedTile === 'pomodoro' ? null : 'pomodoro')}
        />
      </div>
      <div className="relative z-10">
        <div className="text-sm text-white/80 mb-2 uppercase tracking-wider">
          {pomodoroMode === 'work' ? 'Focus Time' : 'Break Time'}
        </div>
        <div className="text-5xl font-mono font-bold text-white mb-4">
          {formatPomodoroTime(pomodoroTime)}
        </div>
        <div className="flex items-center gap-4 mb-4">
          <button
            onClick={togglePomodoro}
            className="flex items-center gap-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-xl transition-colors"
          >
            {pomodoroActive ? <Pause className="w-5 h-5" /> : <Play className="w-5 h-5" />}
            <span className="text-white font-medium">
              {pomodoroActive ? 'Pause' : 'Start'}
            </span>
          </button>
          <button
            onClick={resetPomodoro}
            className="flex items-center gap-2 bg-white/20 hover:bg-white/30 px-4 py-2 rounded-xl transition-colors"
          >
            <RotateCcw className="w-5 h-5" />
            <span className="text-white font-medium">Reset</span>
          </button>
        </div>
        <div className="text-white/80 text-sm">
          Session {pomodoroSession + 1}
        </div>
      </div>
    </div>
  );

  const SpotifyTile = () => (
    <div className={`relative overflow-hidden rounded-2xl p-8 ${pomodoroActive ? 'opacity-50' : 'opacity-100'} transition-opacity duration-500`}
         style={{
           background: 'linear-gradient(135deg, #1db954 0%, #191414 100%)',
           boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
         }}>
      <div className="absolute inset-0 bg-gradient-to-r from-green-600/20 to-gray-900/20"></div>
      {/* Music Wave Graphics */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-4 right-4 flex items-end gap-1">
          <div className="w-2 h-8 bg-white/30 rounded-full"></div>
          <div className="w-2 h-12 bg-white/40 rounded-full"></div>
          <div className="w-2 h-6 bg-white/30 rounded-full"></div>
          <div className="w-2 h-16 bg-white/50 rounded-full"></div>
          <div className="w-2 h-4 bg-white/30 rounded-full"></div>
        </div>
        <div className="absolute bottom-4 left-4 w-24 h-24 border-4 border-white/30 rounded-full"></div>
        <div className="absolute bottom-8 left-8 w-16 h-16 border-2 border-white/40 rounded-full"></div>
        <div className="absolute top-1/2 left-1/3 w-12 h-1 bg-white/20 rounded-full transform rotate-45"></div>
        <div className="absolute top-1/3 right-1/3 w-8 h-1 bg-white/30 rounded-full transform -rotate-12"></div>
      </div>
      <div className="absolute top-4 right-4">
        <Maximize2 
          className="w-6 h-6 text-white/70 cursor-pointer hover:text-white transition-colors"
          onClick={() => setExpandedTile(expandedTile === 'spotify' ? null : 'spotify')}
        />
      </div>
      <div className="relative z-10">
        <div className="flex items-center gap-4 mb-4">
          <img 
            src={spotifyTrack.image} 
            alt="Album art"
            className="w-16 h-16 rounded-xl shadow-lg"
          />
          <div className="flex-1">
            <div className="text-white font-bold text-lg truncate">
              {spotifyTrack.name}
            </div>
            <div className="text-white/70 text-sm truncate">
              {spotifyTrack.artist}
            </div>
          </div>
        </div>
        
        <div className="flex items-center justify-center gap-4 mb-4">
          <button className="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors">
            <SkipBack className="w-5 h-5 text-white" />
          </button>
          <button 
            onClick={toggleSpotify}
            className="p-4 rounded-full bg-white hover:bg-white/90 transition-colors"
          >
            {spotifyPlaying ? 
              <Pause className="w-6 h-6 text-black" /> : 
              <Play className="w-6 h-6 text-black" />
            }
          </button>
          <button className="p-2 rounded-full bg-white/20 hover:bg-white/30 transition-colors">
            <SkipForward className="w-5 h-5 text-white" />
          </button>
        </div>
        
        <div className="flex items-center gap-2">
          <Volume2 className="w-4 h-4 text-white/70" />
          <div className="flex-1 h-2 bg-white/20 rounded-full overflow-hidden">
            <div 
              className="h-full bg-white rounded-full transition-all duration-300"
              style={{ width: `${spotifyVolume}%` }}
            ></div>
          </div>
          <span className="text-white/70 text-sm">{spotifyVolume}%</span>
        </div>
      </div>
    </div>
  );

  const CalendarTile = () => (
    <div className={`relative overflow-hidden rounded-2xl p-8 ${pomodoroActive ? 'opacity-50' : 'opacity-100'} transition-opacity duration-500`}
         style={{
           background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
           boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
         }}>
      <div className="absolute inset-0 bg-gradient-to-r from-pink-600/20 to-red-600/20"></div>
      {/* Calendar Grid Graphics */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-4 right-4 grid grid-cols-3 gap-1">
          <div className="w-3 h-3 bg-white/30 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/40 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/30 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/40 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/50 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/30 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/30 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/40 rounded-sm"></div>
          <div className="w-3 h-3 bg-white/30 rounded-sm"></div>
        </div>
        <div className="absolute bottom-4 left-4 w-20 h-16 border-2 border-white/30 rounded-lg"></div>
        <div className="absolute bottom-8 left-8 w-12 h-8 border-1 border-white/40 rounded-md"></div>
        <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-white/20 rounded-full"></div>
      </div>
      <div className="absolute top-4 right-4">
        <Maximize2 
          className="w-6 h-6 text-white/70 cursor-pointer hover:text-white transition-colors"
          onClick={() => setExpandedTile(expandedTile === 'calendar' ? null : 'calendar')}
        />
      </div>
      <div className="relative z-10">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-white font-bold text-xl">
            {currentMonth.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
          </h3>
          <Calendar className="w-6 h-6 text-white/70" />
        </div>
        
        <div className="grid grid-cols-7 gap-1 text-center text-xs mb-2">
          {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
            <div key={day} className="text-white/70 font-semibold py-1">
              {day}
            </div>
          ))}
        </div>
        
        <div className="grid grid-cols-7 gap-1 text-center">
          {getDaysInMonth(currentMonth).map((day, index) => (
            <div key={index} className="aspect-square flex items-center justify-center">
              {day && (
                <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-colors ${
                  isToday(day) 
                    ? 'bg-white text-pink-600 font-bold' 
                    : 'text-white hover:bg-white/20'
                }`}>
                  {day}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const QuoteTile = () => (
    <div className={`relative overflow-hidden rounded-2xl p-8 ${pomodoroActive ? 'opacity-50' : 'opacity-100'} transition-opacity duration-500`}
         style={{
           background: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
           boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
         }}>
      <div className="absolute inset-0 bg-gradient-to-r from-cyan-600/20 to-pink-600/20"></div>
      {/* Quote Bubble Graphics */}
      <div className="absolute inset-0 opacity-20">
        <div className="absolute top-4 right-4 w-12 h-8 bg-gray-700/30 rounded-full"></div>
        <div className="absolute top-8 right-8 w-4 h-4 bg-gray-700/30 rounded-full"></div>
        <div className="absolute top-12 right-12 w-2 h-2 bg-gray-700/30 rounded-full"></div>
        <div className="absolute bottom-4 left-4 w-20 h-16 bg-gray-700/20 rounded-2xl transform rotate-12"></div>
        <div className="absolute bottom-8 left-8 w-16 h-12 bg-gray-700/30 rounded-xl transform -rotate-6"></div>
        <div className="absolute top-1/3 left-1/3 w-6 h-6 bg-gray-700/20 rounded-full"></div>
      </div>
      <div className="absolute top-4 right-4">
        <Maximize2 
          className="w-6 h-6 text-gray-700/70 cursor-pointer hover:text-gray-700 transition-colors"
          onClick={() => setExpandedTile(expandedTile === 'quote' ? null : 'quote')}
        />
      </div>
      <div className="relative z-10 flex flex-col justify-center h-full">
        <Quote className="w-8 h-8 text-gray-700/50 mb-4" />
        <blockquote className="text-gray-800 text-lg font-medium leading-relaxed mb-4">
          "{dailyQuote.text}"
        </blockquote>
        <cite className="text-gray-600 text-sm font-semibold">
          — {dailyQuote.author}
        </cite>
      </div>
    </div>
  );

  const SettingsModal = () => (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-900 rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl">
        <h2 className="text-2xl font-bold mb-6 text-gray-900 dark:text-white">Settings</h2>
        
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Time Format
            </label>
            <div className="flex gap-4">
              <button 
                onClick={() => setIs24Hour(false)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  !is24Hour ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                12 Hour
              </button>
              <button 
                onClick={() => setIs24Hour(true)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  is24Hour ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
                }`}
              >
                24 Hour
              </button>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Work Duration (minutes)
            </label>
            <input 
              type="range" 
              min="15" 
              max="60" 
              value={workDuration}
              onChange={(e) => setWorkDuration(parseInt(e.target.value))}
              className="w-full"
            />
            <span className="text-sm text-gray-600 dark:text-gray-400">{workDuration} minutes</span>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Break Duration (minutes)
            </label>
            <input 
              type="range" 
              min="5" 
              max="30" 
              value={breakDuration}
              onChange={(e) => setBreakDuration(parseInt(e.target.value))}
              className="w-full"
            />
            <span className="text-sm text-gray-600 dark:text-gray-400">{breakDuration} minutes</span>
          </div>
          
          <div>
            <label className="flex items-center gap-2">
              <input 
                type="checkbox" 
                checked={pauseSpotifyOnFocus}
                onChange={(e) => setPauseSpotifyOnFocus(e.target.checked)}
                className="rounded"
              />
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Pause Spotify during focus time
              </span>
            </label>
          </div>
          
          <div>
            <label className="flex items-center gap-2">
              <input 
                type="checkbox" 
                checked={isDarkMode}
                onChange={(e) => setIsDarkMode(e.target.checked)}
                className="rounded"
              />
              <span className="text-sm text-gray-700 dark:text-gray-300">
                Dark mode
              </span>
            </label>
          </div>
        </div>
        
        <button 
          onClick={() => setShowSettings(false)}
          className="w-full mt-6 bg-blue-500 hover:bg-blue-600 text-white py-3 rounded-lg font-medium transition-colors"
        >
          Done
        </button>
      </div>
    </div>
  );

  return (
    <div className={`min-h-screen transition-colors duration-300 ${isDarkMode ? 'bg-gray-900' : 'bg-gray-100'}`}>
      <div className="container mx-auto p-6">
        {/* Header */}
        <div className="flex justify-end items-center mb-8">
          <button 
            onClick={() => setShowSettings(true)}
            className={`p-3 rounded-xl transition-colors ${
              isDarkMode 
                ? 'bg-gray-800 hover:bg-gray-700 text-white' 
                : 'bg-white hover:bg-gray-50 text-gray-700'
            }`}
          >
            <Settings className="w-6 h-6" />
          </button>
        </div>
        
        {/* Main Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {/* Main 2x2 Grid */}
          <div className="lg:col-span-2 grid grid-cols-1 md:grid-cols-2 gap-6">
            <ClockTile />
            <PomodoroTile />
            <SpotifyTile />
            <CalendarTile />
          </div>
          
          {/* Side Column */}
          <div className="space-y-6">
            <QuoteTile />
            
            {/* Ambient Controls */}
            <div className={`relative overflow-hidden rounded-2xl p-6 ${pomodoroActive ? 'opacity-50' : 'opacity-100'} transition-opacity duration-500`}
                 style={{
                   background: 'linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)',
                   boxShadow: '0 20px 40px rgba(0,0,0,0.3)'
                 }}>
              <div className="absolute inset-0 bg-gradient-to-r from-orange-600/20 to-red-600/20"></div>
              {/* Sound Wave Graphics */}
              <div className="absolute inset-0 opacity-20">
                <div className="absolute top-2 right-2 flex items-center gap-1">
                  <div className="w-1 h-4 bg-gray-700/30 rounded-full"></div>
                  <div className="w-1 h-8 bg-gray-700/40 rounded-full"></div>
                  <div className="w-1 h-6 bg-gray-700/30 rounded-full"></div>
                  <div className="w-1 h-10 bg-gray-700/50 rounded-full"></div>
                  <div className="w-1 h-4 bg-gray-700/30 rounded-full"></div>
                </div>
                <div className="absolute bottom-2 left-2 w-12 h-12 border-2 border-gray-700/30 rounded-full"></div>
                <div className="absolute bottom-4 left-4 w-8 h-8 border-1 border-gray-700/40 rounded-full"></div>
                <div className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-4 h-4 bg-gray-700/20 rounded-full"></div>
              </div>
              <div className="relative z-10">
                <h3 className="text-gray-800 font-bold text-lg mb-4">Ambient Sounds</h3>
                <select 
                  value={ambientSound}
                  onChange={(e) => setAmbientSound(e.target.value)}
                  className="w-full p-3 rounded-lg bg-white/50 border-0 text-gray-800 font-medium mb-4"
                >
                  <option value="none">None</option>
                  <option value="rain">Rain</option>
                  <option value="cafe">Café</option>
                  <option value="forest">Forest</option>
                  <option value="ocean">Ocean</option>
                </select>
                
                {ambientSound !== 'none' && (
                  <div className="flex items-center gap-2">
                    <Volume2 className="w-4 h-4 text-gray-700" />
                    <div className="flex-1 h-2 bg-white/30 rounded-full overflow-hidden">
                      <div 
                        className="h-full bg-gray-700 rounded-full transition-all duration-300"
                        style={{ width: `${ambientVolume}%` }}
                      ></div>
                    </div>
                    <span className="text-gray-700 text-sm">{ambientVolume}%</span>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Settings Modal */}
      {showSettings && <SettingsModal />}
    </div>
  );
};

export default Dashboard;
